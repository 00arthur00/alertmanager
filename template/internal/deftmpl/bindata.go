// Code generated by go-bindata.
// sources:
// template/default.tmpl
// DO NOT EDIT!

package deftmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateDefaultTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x1a\xed\x6e\xdb\x36\xf0\xbf\x9f\x82\x55\x31\xb4\x01\x2a\xcb\x49\xda\xa0\x71\xec\x0c\x5d\x9a\xac\x03\xd2\xae\x48\x93\x6e\x43\x51\x14\xb4\x44\xdb\x4c\x28\x51\x25\x69\x3b\x69\xd7\x77\xdf\x91\x94\x25\xd1\x96\x3f\x12\x74\x8e\xb7\xba\xc5\x56\xf3\x74\x77\xbc\x3b\xde\x17\x75\xfa\xfa\x15\x45\xa4\x4b\x13\x82\xbc\x4f\x9f\x30\x23\x42\xc5\x38\xc1\x3d\x22\x3c\xf4\xed\xdb\x0b\xbd\x7e\x6d\xd7\x80\x48\x92\x08\x80\xb5\x99\x24\x17\x67\xa7\x9a\x0a\x9e\xd7\x8f\xaf\x15\x11\x09\x66\x00\x02\x48\xf0\x30\x30\x78\xf2\x67\x41\x42\x42\x87\x44\xb4\x35\xd2\x59\xb6\xb0\x34\x19\x77\x97\xbd\x1c\x74\x2e\x49\xa8\x34\xdb\x0f\x9a\xe4\x9d\xc2\x6a\x20\xd1\xdf\x48\xf1\x8b\x34\x1d\x93\xd2\x2e\x22\x9f\xf3\x87\x5e\x97\x0a\x9a\xf4\x34\x4d\x53\xd3\x18\x2d\x64\xfd\xc4\x40\x81\x94\x91\xa4\xbc\xe3\x47\xa4\x91\x7e\x15\x7c\x90\x9e\xe2\x0e\x61\xb2\xfe\x8e\x0b\x45\xa2\xb7\x98\x0a\x59\x7f\x8f\xd9\x80\xe8\x0d\x2f\x39\x4d\x90\x87\x34\x57\x64\xb7\xec\x29\xf4\x58\xf3\xaa\x1f\xf1\x38\xe6\x89\x25\xde\xca\x60\x25\x7e\x5b\x40\xf2\x18\x48\x46\x54\xf5\x5d\x64\xb0\x40\xcc\x87\xc4\xdd\xfd\x0d\x8e\x61\x43\x6b\xc6\xaa\xdd\x73\xc1\xb7\xf2\x5f\x33\xce\x26\x22\x32\x14\x34\x55\x94\x27\xde\x1c\x1b\x2b\x72\xad\xec\x39\x7e\x62\x54\xaa\x0c\x55\xe0\xa4\x07\x92\xc1\xc2\xca\xd5\xac\x15\xc0\x69\x3b\x69\xab\xf8\xc6\x90\x5a\x7c\xbd\x6a\xa3\x5c\x81\x4c\x30\xbb\xf9\x8b\x24\xe1\x70\x4e\x20\x93\xc3\xb2\x04\xbe\x03\xdf\xf2\x06\x25\x35\xcb\x7a\x4a\x86\xc3\xab\x3a\xac\xf0\x80\xa9\xba\xa2\x8a\x91\x4c\x53\x45\xe2\x94\x61\xe5\xfa\x5b\x7d\x96\x59\x5d\x3e\x03\xa9\xdd\x3c\xae\x62\xe5\x06\xd3\x92\xfc\xba\x98\xb1\x0e\x00\xa6\xf8\x55\x8a\xaf\x99\x82\x73\x2c\x42\x64\x34\xb9\x5a\x5a\x82\x54\x10\xed\x10\xde\x72\xd8\x25\xfe\x73\x0d\x60\x52\xc3\x92\x12\xd0\x90\x27\x10\x17\x97\x74\x59\x19\xa6\xc4\x75\x0e\xbe\x4f\xd3\xb0\x8f\x55\x61\x62\xc1\xe3\xbb\x1f\xd7\x24\x37\x88\x55\x09\x24\xcb\xbb\x92\x23\x5b\xaa\x77\x8b\x06\xea\x26\xe7\x37\x1d\xb3\xb7\x73\xcf\x69\x8e\x21\xa3\x24\x51\x77\xd7\x78\x16\xc7\x22\xdb\xdf\xed\xd0\xa7\xf9\xd2\x44\x2a\x9c\x84\x44\x56\xf0\x9d\x4a\x52\x73\xac\xca\x53\xd9\x23\x09\x25\xdf\xcd\xa8\x53\x0c\x25\x1f\x88\x70\x51\xd0\x57\xa8\xef\x88\x49\x62\x4c\x59\xc1\xb2\xa8\x74\xb7\x96\xcf\xe5\xd4\x57\x31\xd3\x6c\x6a\xad\x07\x2f\x7f\x3f\x3a\xff\xeb\xed\x31\xd2\x20\xf4\xf6\xe2\x97\xd3\xdf\x8e\x90\xe7\x07\xc1\x1f\xbb\x47\x41\xf0\xf2\xfc\x25\xfa\xf3\xd5\xf9\xeb\x53\xb4\x5d\x6f\xa0\x73\x48\xc4\x92\x6a\x13\x61\x16\x04\xc7\x6f\xa0\xd8\xf4\x95\x4a\x9b\x41\x30\x1a\x8d\xea\xa3\xdd\x3a\x17\xbd\xe0\xfc\x2c\xb8\xd6\xbc\xb6\x35\x71\xf6\xd3\x57\x25\xca\x7a\xa4\x22\xef\xb0\xd6\x32\x1b\x5e\xc7\x2c\x91\xed\x0a\x36\xdb\xfb\xfb\xfb\x96\xda\x5b\x0e\x49\xaa\x1b\x46\xda\x5e\x97\x27\xca\xef\xe2\x98\xb2\x9b\x26\x7a\xf4\x8a\xb0\x21\x51\x34\xc4\xe8\x0d\x19\x90\x47\x4f\x50\x0e\x78\x82\x5e\x08\x8a\xd9\x13\x24\x41\x32\x1f\x52\x34\xed\x1e\xa0\x0e\xbf\xf6\x25\xfd\x02\x3d\x40\x13\x7e\x8b\x88\x08\x1f\x40\x07\xc8\x30\x85\x07\xa4\x89\xb6\x9f\xa6\x00\x88\xb1\xe8\xd1\xa4\x89\x1a\x07\x46\x13\x82\x23\xf8\x27\x26\x0a\x23\x9d\xe9\xdb\xde\x90\x92\x51\x0a\x25\xca\x43\x90\xa8\x14\x44\x42\xdb\x1b\xd1\x48\xf5\xdb\x11\x19\xd2\x90\xf8\x66\xe1\xa1\x60\x4c\xa5\x55\xf3\xc9\xe7\x01\x1d\xb6\xbd\x23\x4b\xe1\x9f\xdf\xa4\xa4\x44\xaf\xbd\x3b\xd0\xaa\x1e\x20\xc8\x2e\x42\x12\xd5\xbe\x38\x3f\xf1\x9f\x5b\x2e\x26\xc9\x1e\xce\xf3\x8a\x56\x60\x71\x6a\xb5\x56\x60\x05\xae\xb5\x3a\x3c\xba\x41\x14\x48\x64\xc8\x53\x10\xdb\x33\x0b\x75\xa3\x7f\x67\xd6\x96\x61\x1f\x5c\xc7\x58\xfb\x58\xbb\xd0\xeb\x71\x32\x5b\xa9\xbd\xfd\x11\xe9\x5c\x51\xd8\xc8\x3c\x88\x39\x57\x7d\x43\x84\x13\x05\x4c\x29\x96\x24\x2a\x90\xb4\xa5\x0c\xb5\x8f\xa3\xcb\x81\x54\x4d\x94\x40\xb5\x38\x40\xc6\xe8\xc0\xb1\xd1\xf8\x09\x3d\xa0\xb1\x3e\x1f\xa0\x3f\x40\x7d\x42\x7b\x7d\x65\x1f\x1c\x20\xa8\x54\xc4\xcf\x41\xf5\x3d\x12\x83\x9c\x50\x4b\x7a\xd0\x7f\x25\x91\x1f\x72\xc6\x45\x13\x3d\xec\xee\xe9\xbf\x65\x4f\x40\x29\x8e\x22\x23\x15\x78\x05\xea\xf4\x0c\x66\xdb\xcb\x30\x3d\x6d\x6f\x85\x3b\x8c\xac\xd6\x72\x25\xa5\x97\xd4\xa3\x52\x76\x84\x5a\x4a\xdc\x63\x8c\x21\xa4\x25\x88\x56\x2b\x01\xdc\x3b\x34\x13\xe6\x83\x8b\xf5\x40\x12\xc5\x53\xd7\x50\x43\xf3\x00\x62\x93\xa7\xde\x21\x04\x58\x54\x08\x6a\xc3\xdd\xdb\x6b\x34\x56\x1c\x2a\x95\x42\x47\x54\x42\x56\x80\x6d\x3b\x8c\x87\x57\x8e\xf7\xc7\xf8\xda\xcf\x9c\x04\x84\x4d\xaf\x9d\x87\x21\x23\x58\xe8\x0d\xe1\x5a\x52\x86\xcf\x0a\xa5\xdc\x38\x08\x0f\x14\x9f\x08\x09\xc7\x5a\xc6\x50\x60\xaa\x88\x0e\x57\xed\x56\xae\xbe\x93\xc6\x99\xaf\xc4\x58\x6e\x7d\xc8\x26\x98\xb3\x73\xd6\x96\x80\x64\x4d\x18\xcb\xb0\xdb\x5e\xc3\xae\x65\x8a\xc3\xf1\x7a\xa5\x8a\x66\x0f\x05\x8e\xe8\x40\x36\xd1\xae\x81\x55\x24\x80\x6e\xd7\xc9\x62\x96\x0c\x98\x80\x2b\x48\xce\x68\x84\x1e\x92\x7d\xfd\xd7\x4d\x0c\xdd\x6e\xc9\x16\xeb\x90\x1d\x0a\x49\x56\x97\x25\xf6\x66\x06\x9c\x63\x5d\x43\x32\xca\x4a\xca\xb3\x06\x18\xd9\x94\xa8\x0c\x3f\x84\xf2\x4e\x44\xd5\x79\x99\xff\x1a\xe6\x50\xa6\xcf\xed\x78\xef\xd9\xce\xce\x51\x75\x01\xda\xd1\x7e\xed\xa1\x2c\xde\xec\x06\xe5\xd3\xb3\xb4\xd5\x11\x39\xfe\x53\xbc\x16\xc9\xdf\x87\x20\xd3\xba\x4e\xbc\xd9\xb0\x38\x5b\x68\x1b\x10\x64\xde\x7a\x82\xce\x02\x15\x57\xf7\x19\xaf\x4e\x74\x07\x8a\xd0\xf4\xbe\xd9\x45\xbe\xed\x5c\xe3\xa7\xd0\xb2\x26\xd7\x39\xfc\x3c\x07\xe7\x6b\xb1\x71\xd3\x65\x8a\x59\xe1\x3c\xdb\xd6\x79\xe6\xf9\xc6\xda\xe7\xbe\x99\x66\x5f\x2f\x27\x58\x77\x57\x80\xdc\x33\xce\x25\xf3\xdc\x21\x53\x03\xae\x31\x82\x74\xdb\xde\x32\xf7\xdd\x15\xfb\xc3\x38\x69\x9e\x9c\x9c\x64\xc9\x37\x22\x21\x17\xe6\x65\xe2\xf8\x7a\xe0\x34\xfe\x3b\xba\xed\x77\xf2\x76\x87\xb3\xa8\x3a\x71\x87\x03\x21\x35\xf7\x94\x53\x0b\xc8\x1b\x0a\x9a\x18\xa6\x59\x5f\x31\x91\xe0\x9f\x69\xc1\x0c\x3f\x73\x3b\x86\x84\x19\x03\x4f\x9c\x52\x05\xfc\xbf\x90\xca\xa4\xbf\xfb\xf4\x39\x89\x70\x45\xbd\x9e\xc2\xc8\xc0\xc6\xca\x4d\x5b\xc8\x73\x60\xde\xbd\x41\x79\xb1\xc7\x7b\xf8\x1e\x2e\xac\x20\x2e\x5a\xf8\xfe\xa7\x15\xe0\x4a\x1f\x9e\x48\xbc\xd5\xe9\xd7\xfe\xa9\x2c\x20\xd9\xbb\xf7\x2d\xf0\xb8\x8a\xa2\xb0\x09\xd9\x7f\x27\x64\xa5\x12\x3c\xe9\xdd\x9f\x69\x3f\xcc\x1e\xbe\x7c\x44\x16\xd0\x0a\xac\x90\xdf\xc1\xeb\x2a\x1a\x86\xec\xc9\x78\xc2\xe0\x48\xb2\xf1\xc3\x1f\xc6\x0f\x6d\x6b\x9a\xbb\x5a\xab\x73\x7f\xc7\xac\x5f\xe7\x55\xd9\x68\xc1\x68\x6d\xf6\xfc\xeb\x9e\x95\x99\x1d\x77\x99\x56\x4e\x2d\x28\x46\x7c\xb6\x12\xdc\xbb\x67\x94\x24\x5a\x17\xf7\x58\x68\xd1\x85\xf3\xd2\xff\xa4\xb3\xdc\x2d\xd9\x2f\xd9\x7d\x9c\x11\x68\x91\x86\x24\x9a\xd1\x7f\x6c\x9a\x96\x35\x2a\x16\x6b\x98\x9c\x5b\xfd\x35\x94\x69\xed\xec\x74\x9b\x08\x9e\xd7\xb0\x6d\x02\xeb\xff\xd9\x85\x95\x6f\x03\xe3\x84\x5c\xba\x0f\x8c\x41\xf7\x70\x23\xc8\xa5\xd9\x78\xe3\x0f\xe3\x8d\x9b\x3b\xc1\xe6\x4e\xb0\xb9\x13\xac\xb7\xb3\x7c\x8f\x74\x0f\xd8\x7a\x9a\x71\x78\x8b\x41\x52\x4e\x52\x40\x56\x3e\xc7\x76\x3e\xec\x28\xcd\xe9\x8b\x97\xdd\xfb\xfb\xfb\xf3\xc6\x83\xee\x5c\x6c\x7a\xa0\xb3\x1e\x35\x6d\x9d\xaa\xeb\x2a\x2b\xeb\xce\xc2\xd1\xb2\x39\xde\xaa\x79\xc4\x82\xd2\x3b\x31\x15\x76\xbf\x61\x29\xcd\x70\x26\x3e\xd0\x5f\x9d\x43\xec\x94\x27\x36\x85\x96\xe5\x89\xcd\x20\x01\x4a\x3d\x5b\x71\xcf\xeb\x1d\xe8\x84\x3a\x37\xcb\x4d\x31\xa6\x73\xc7\xd4\xb4\x78\x32\x33\xb4\x02\x08\xf3\x43\xfb\xff\x9a\x9b\x26\xd6\xad\xeb\x9a\xf1\x71\x92\x55\xb1\xc8\x5f\xad\x40\x7f\x03\xa8\x21\xfa\xd3\xc2\xc3\x5a\xf1\x8d\x7c\xed\x9f\x00\x00\x00\xff\xff\x49\x58\xa5\xc8\xf7\x31\x00\x00")

func templateDefaultTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateDefaultTmpl,
		"template/default.tmpl",
	)
}

func templateDefaultTmpl() (*asset, error) {
	bytes, err := templateDefaultTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/default.tmpl", size: 12791, mode: os.FileMode(420), modTime: time.Unix(1455622068, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/default.tmpl": templateDefaultTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"default.tmpl": &bintree{templateDefaultTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

