// Code generated by go-bindata.
// sources:
// template/default.tmpl
// DO NOT EDIT!

package deftmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateDefaultTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x1a\xfd\x73\xd3\xb8\xf2\xf7\xfc\x15\xc2\xcc\x1b\xe8\x0c\x8e\xd3\x16\x3a\x34\x4d\xfa\x86\x57\xda\xc7\xcd\x14\x8e\x29\x2d\x77\x37\x0c\xc3\x28\xb6\x92\x88\xca\x96\x91\xe4\xa4\x81\xe3\x7f\xbf\x95\xe4\xf8\x23\x76\x3e\xda\xe1\xd2\xdc\x91\x76\xa0\xd6\x5a\xbb\xda\x5d\xed\x97\xb4\xfe\xf6\x0d\x05\xa4\x4f\x23\x82\x9c\x4f\x9f\x30\x23\x42\x85\x38\xc2\x03\x22\x1c\xf4\xfd\xfb\x0b\x3d\x7e\x6d\xc7\x30\x91\x44\x01\x00\x1b\x73\x51\xae\x2e\xce\x35\x16\xbc\x6f\x9e\xde\x28\x22\x22\xcc\x00\x04\x10\xef\xa1\x67\xe6\xc9\xff\x0a\xe2\x13\x3a\x22\xa2\xab\x27\x5d\xa4\x03\x8b\x93\x52\x2f\x93\x97\x49\xef\x33\xf1\x95\x26\xfb\x41\xa3\xbc\x53\x58\x25\x12\xfd\x89\x14\xbf\x8a\xe3\x29\x2a\xed\x23\xf2\x25\x7b\xe9\xf4\xa9\xa0\xd1\x40\xe3\xb4\x35\x8e\x91\x42\x36\xcf\x0c\x14\x50\x19\x89\x8a\x2b\x7e\x44\x7a\xd2\xff\x05\x4f\xe2\x73\xdc\x23\x4c\x36\xdf\x71\xa1\x48\xf0\x16\x53\x21\x9b\xef\x31\x4b\x88\x5e\xf0\x33\xa7\x11\x72\x90\xa6\x8a\xec\x92\x03\x85\x1e\x6b\x5a\xcd\x13\x1e\x86\x3c\xb2\xc8\x3b\x29\xac\x40\x6f\x07\x50\x1e\x03\xca\x98\xaa\x61\x79\x32\x68\x20\xe4\x23\x52\x5e\xfd\x0d\x0e\x61\x41\xab\xc6\xba\xd5\x33\xc6\x77\xb2\xa7\x39\x7b\x13\x10\xe9\x0b\x1a\x2b\xca\x23\x67\x81\x8e\x15\xb9\x51\x76\x1f\x3f\x31\x2a\x55\x3a\x55\xe0\x68\x00\x9c\xc1\xc0\xf2\xd5\x46\x8d\x1c\x5a\x55\x94\x56\x8b\x6b\x34\xa9\xf9\xd7\xa3\x2e\xca\x24\x48\x39\xb3\xab\xbf\x88\x22\x0e\x1b\x05\x4c\x95\x69\x16\xe0\x77\x20\x5c\x5c\xa1\x20\x68\x51\x52\xc9\xb0\x7f\xdd\x84\x11\x4e\x98\x6a\x2a\xaa\x18\x49\x65\x55\x24\x8c\x19\x56\x65\x8b\x6b\xce\x53\x6c\x99\x4e\x22\xb5\xa1\x87\x75\xa4\xca\xee\xb4\x22\xbd\x3e\x66\xac\x07\x80\x0a\xbd\x5a\xf6\x35\x51\x30\x8f\x65\x13\x19\x8d\xae\x57\xe6\x20\x16\x44\x9b\x84\xb3\xda\xec\x02\xfd\x85\x0a\x30\xc1\x61\x45\x0e\xaa\xcb\x97\x36\x32\xd6\xf4\x82\x44\x4d\x32\x84\xaa\xa5\xdf\x6e\x4b\xab\x14\x7d\x46\x49\xa4\xee\xbe\xa9\xf3\x28\xe6\x31\xf2\x6e\x8a\xaa\xd2\xa5\x91\x54\x38\xf2\x89\xac\xa1\x5b\x71\xed\xe6\x7c\xad\xf2\x58\x0e\x48\x44\xc9\x0f\x53\x6a\x85\xa0\xe4\x89\xf0\x97\x39\x4a\x8d\xf8\x25\x36\x49\x88\x29\xcb\x49\xe6\xf9\xe1\xd6\xfc\x95\x29\x0d\x55\xc8\x34\x99\x46\xe7\xc1\xcb\x5f\x4f\x2e\xff\x78\x7b\x8a\x34\x08\xbd\xbd\xfa\xdf\xf9\x2f\x27\xc8\x71\x3d\xef\xb7\xfd\x13\xcf\x7b\x79\xf9\x12\xfd\xfe\xea\xf2\xf5\x39\xda\x6d\xb6\xd0\x25\x04\x2f\x49\xb5\x8a\x30\xf3\xbc\xd3\x37\x10\xa2\x87\x4a\xc5\x6d\xcf\x1b\x8f\xc7\xcd\xf1\x7e\x93\x8b\x81\x77\x79\xe1\xdd\x68\x5a\xbb\x1a\x39\x7d\x74\x55\x01\xb3\x19\xa8\xc0\x39\x6e\x74\xcc\x82\x37\x21\x8b\x64\xb7\x86\xcc\xee\xe1\xe1\xa1\xc5\x76\x56\x9b\x24\xd5\x84\x91\xae\xd3\xe7\x91\x72\xfb\x38\xa4\x6c\xd2\x46\x8f\x5e\x11\x36\x22\x8a\xfa\x18\xbd\x21\x09\x79\xf4\x04\x65\x80\x27\xe8\x85\xa0\x98\x3d\x41\x12\x38\x73\x21\xac\xd1\xfe\x11\xea\xf1\x1b\x57\xd2\xaf\x90\x39\xdb\xf0\x2c\x02\x22\x5c\x00\x1d\x21\x43\x14\x5e\x90\x36\xda\x7d\x1a\x03\x20\xc4\x62\x40\xa3\x36\x6a\x1d\x19\x49\x08\x0e\xe0\x4f\x48\x14\x46\x3a\x3a\x76\x9d\x11\x25\xe3\x18\xc2\xba\x83\x7c\x40\x05\x4f\xe8\x3a\x63\x1a\xa8\x61\x37\x20\x23\xea\x13\xd7\x0c\x1c\xe4\x4d\xb1\xb4\x68\x2e\xf9\x92\xd0\x51\xd7\x39\xb1\x18\xee\xe5\x24\x26\x05\x7c\x6d\xdd\x9e\x16\xf5\x08\xf9\x43\x2c\x24\x51\xdd\xab\xcb\x33\xf7\xb9\xa5\x62\x02\xd3\xf1\x22\xab\xe8\x78\x76\x4e\xa3\xd1\xf1\x2c\xc3\x8d\x4e\x8f\x07\x13\x44\x01\x45\xfa\x3c\x06\xb6\x1d\x33\x50\x13\xfd\x9c\x6a\x5b\xfa\x43\x30\x1d\xa3\xed\x53\x6d\x42\xaf\x89\x94\x60\xb9\x6b\xd6\xb7\x3b\x26\xbd\x6b\x0a\x0b\x99\x17\x21\xe7\x6a\x68\x90\x70\xa4\x80\x28\xc5\x92\x04\xf9\x24\xad\x29\x83\xed\xe2\xe0\x73\x22\x55\x1b\x45\x3c\x22\x47\xc8\x28\x1d\x28\xb6\x5a\xff\x41\x0f\x68\xa8\xf7\x07\xf0\x8f\xd0\x90\xd0\xc1\x50\xd9\x17\x47\x08\xa2\x3b\x71\x33\x50\xf3\x80\x84\xc0\x27\xc4\xeb\x01\x54\x2d\x51\xe0\xfa\x9c\x71\xd1\x46\x0f\xfb\x07\xfa\xb7\x68\x09\x28\xc6\x41\x60\xb8\x02\xab\x40\xbd\x81\x99\xd9\x75\xd2\x99\x8e\xd6\xb7\xc2\x3d\x46\xd6\xab\xb9\x82\xd0\x2b\xca\x51\xcb\x3b\x42\x1d\x25\xee\xd1\xc7\x10\xd2\x1c\x04\xeb\xe5\x00\xaa\x75\x4d\x84\xb9\x60\x62\x03\xe0\x44\xf1\xb8\xac\xa8\x91\x79\x01\xbe\xc9\x63\xe7\x18\x1c\x2c\xc8\x19\xb5\xee\xee\x1c\xb4\x5a\x6b\x76\x95\x5a\xa6\x03\x2a\x21\x2a\xc0\xb2\x3d\xc6\xfd\xeb\x92\xf5\x87\xf8\xc6\x4d\x8d\x04\x98\x8d\x6f\x4a\x2f\x7d\x46\xb0\xd0\x0b\x42\x31\x5f\x84\xcf\x73\xa5\x4c\x39\x08\x27\x8a\xcf\xb8\x44\x49\x5b\x46\x51\xa0\xaa\x80\x8e\xd6\x6d\x56\x65\x79\x67\x95\xb3\x58\x88\x29\xdf\x7a\x93\x8d\x33\xa7\xfb\xac\x35\x01\xc1\x9a\x30\x96\xce\xee\x3a\x2d\x3b\x96\x31\xf6\xa7\xe3\xb5\x0a\x9a\xbe\x14\x38\xa0\x09\x1c\x3e\xf6\x0d\xac\x26\x00\xf4\xfb\xa5\x28\x66\xd1\x80\x08\x98\x82\xe4\x8c\x06\xe8\x21\x39\xd4\xbf\xe5\xc0\xd0\xef\x17\x74\xb1\x09\xd1\x21\xe7\x64\x7d\x51\xe2\x60\xae\xc3\x95\xb4\x6b\x50\xc6\x69\x4a\x79\xd6\x02\x25\x9b\x14\x95\xce\xf7\x21\xbd\x13\x51\xb7\x5f\xe6\x5f\xcb\x6c\x4a\x75\xdf\x4e\x0f\x9e\xed\xed\x9d\xd4\x27\xa0\x3d\x6d\xd7\x0e\x4a\xfd\xcd\x2e\x50\xdc\x3d\x8b\x5b\xef\x91\xd3\x9f\xfc\x32\x21\xbb\x45\x40\xa6\x74\x9d\xb9\x0f\xb0\x73\x76\xd0\x2e\x4c\x90\x59\xe9\x09\x32\x0b\x94\x1f\x77\xe7\x5c\x38\xe8\x0a\x14\xa1\xea\xba\xe9\xe1\xb7\x5b\x3c\xfa\xa2\x2a\x7f\x69\x95\x5b\xda\xfd\x2c\x08\x67\x63\xb1\xb5\xd3\x55\xb2\x59\x6e\x3d\xbb\xd6\x7a\x16\x19\xc7\xc6\x07\xbf\xb9\x6a\xdf\x2c\x23\xd8\x74\x53\x80\xe0\x33\x0d\x26\x8b\xcc\x21\x15\x03\xce\x31\x82\xf4\xbb\xce\x2a\x07\xde\x35\xdb\xc3\x34\x6a\x9e\x9d\x9d\xa5\xd1\x37\x20\x3e\x17\xe6\x06\x6e\x7a\x3e\x28\x55\xfe\x7b\xba\xee\x2f\x05\xee\x1e\x67\x41\x7d\xe4\xf6\x13\x21\x35\xf5\x98\x53\x0b\xc8\x2a\x0a\x1a\x19\xa2\x69\x61\x31\x13\xe1\x9f\x69\xc6\x0c\x3d\x73\x3c\x86\x88\x19\x02\x4d\x1c\x53\x05\xf4\xbf\x92\xda\xa8\xbf\xff\xf4\x39\x09\x70\x4d\xc2\xae\xcc\x48\xc1\x46\xcb\x6d\x9b\xc9\x33\x60\x56\xbe\x41\x7e\xb1\xdb\x7b\xfc\x1e\x4e\xac\xc0\x2e\x5a\x7a\x01\xd4\xf1\x70\xad\x0d\xcf\x04\xde\xfa\xf0\x6b\x7f\x6a\x33\x48\x7a\x65\xbd\x03\x16\x57\x93\x15\xb6\x2e\xfb\xf7\xb8\xac\x54\x82\x47\x83\xfb\x53\xed\x87\xf9\x3d\x8b\x8f\xc8\x02\x3a\x9e\x65\xf2\x07\x58\x5d\x4d\xc1\x90\xbe\x99\x5e\xcb\x97\x38\xd9\xda\xe1\x4f\x63\x87\xb6\x36\xcd\x4c\xad\xd3\xbb\xbf\x6d\xd6\xf7\x79\x75\x3a\x5a\xd2\x90\x9a\xdf\x34\xba\x67\x61\xe6\xfb\x5d\x2a\x55\x29\x17\xe4\x7d\x31\x9b\x09\xee\xdd\x32\x0a\x1c\x6d\x8a\x79\x2c\xd5\xe8\xd2\x26\xe3\x3f\xd2\x58\xee\x16\xec\x57\xac\x3e\x2e\x08\x94\x48\x23\x12\xcc\xa9\x3f\xb6\x45\xcb\x06\x25\x8b\x0d\x0c\xce\x9d\xe1\x06\xf2\xb4\x71\x7a\xba\x8d\x07\x2f\x2a\xd8\xb6\x8e\xf5\xef\xac\xc2\x8a\xa7\x81\x69\x40\x2e\x9c\x07\xa6\xa0\x7b\x38\x11\x64\xdc\x6c\xad\xf1\xa7\xb1\xc6\xed\x99\x60\x7b\x26\xd8\x9e\x09\x36\xdb\x58\x7e\x44\xb8\x87\xd9\xba\x9b\x71\x7c\x8b\x46\x52\x86\x92\x43\xd6\xde\xc8\x2e\x7d\xd9\x51\x68\xd4\xe7\x97\xdd\x87\x87\x87\x8b\xfa\x83\xe5\xbe\x58\xb5\xa1\xb3\x19\x39\x6d\x93\xb2\xeb\x3a\x33\xeb\xde\xd2\xde\xb2\xd9\xde\xba\x7e\xc4\x92\xd4\x3b\xd3\x16\x2e\x7f\xc4\x52\xe8\xe1\xcc\x7c\xd7\xbe\x3e\x83\xd8\x2b\x76\x6c\x72\x29\x8b\x1d\x9b\x24\x02\x4c\xdd\x5b\x29\xef\xd7\x3b\x90\x09\xf5\x26\xab\x75\x31\xaa\xb1\xa3\xd2\x2d\x9e\x8d\x0c\x1d\x0f\xdc\xfc\xd8\xfe\xdf\x28\x87\x89\x4d\xab\xba\xe6\x7c\x9d\x64\x45\xcc\xe3\x57\xc7\xd3\x1f\x01\x6a\x88\xfe\xb6\xf0\xb8\x91\x7f\x58\xde\xf8\x2b\x00\x00\xff\xff\x90\x22\x25\x0a\x2e\x31\x00\x00")

func templateDefaultTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateDefaultTmpl,
		"template/default.tmpl",
	)
}

func templateDefaultTmpl() (*asset, error) {
	bytes, err := templateDefaultTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/default.tmpl", size: 12590, mode: os.FileMode(420), modTime: time.Unix(1449657638, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/default.tmpl": templateDefaultTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"default.tmpl": &bintree{templateDefaultTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
