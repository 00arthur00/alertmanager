// Code generated by go-bindata.
// sources:
// template/default.tmpl
// DO NOT EDIT!

package deftmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateDefaultTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x1a\x6d\x73\xd3\x3c\xf2\x7b\x7e\x85\x30\x73\x03\x9d\xc1\x71\xda\x42\x87\xa6\x49\x6f\xb8\xd2\x1e\x37\x53\x38\xa6\xb4\xdc\xdd\x30\x0c\xa3\xd8\x4a\x22\x2a\x5b\x46\x52\x92\x16\x8e\xff\x7e\x2b\xc9\xb1\xad\xd8\x79\x69\x87\x4b\xf3\x3c\xa4\x1d\xa8\xb5\xde\x5d\xed\xae\xf6\x45\xd2\xfa\xc7\x0f\x14\x91\x3e\x4d\x08\xf2\xbe\x7c\xc1\x8c\x08\x15\xe3\x04\x0f\x88\xf0\xd0\xcf\x9f\xaf\xf4\xf8\xad\x1d\x03\x22\x49\x22\x00\x36\xe6\x92\x5c\x5d\x9c\x6b\x2a\x78\xdf\x3c\xbd\x51\x44\x24\x98\x01\x08\x20\xc1\xe3\xc0\xe0\xc9\xbf\x0a\x12\x12\x3a\x26\xa2\xab\x91\x2e\xb2\x81\xa5\xc9\xb8\xbb\xec\xe5\xa8\xf7\x95\x84\x4a\xb3\xfd\xa4\x49\x3e\x28\xac\x46\x12\xfd\x17\x29\x7e\x95\xa6\x53\x52\xda\x47\xe4\x5b\xfe\xd2\xeb\x53\x41\x93\x81\xa6\x69\x6b\x1a\xa3\x85\x6c\x9e\x19\x28\x90\x32\x92\x94\x67\xfc\x8c\x34\xd2\xdf\x05\x1f\xa5\xe7\xb8\x47\x98\x6c\x7e\xe0\x42\x91\xe8\x3d\xa6\x42\x36\x3f\x62\x36\x22\x7a\xc2\xaf\x9c\x26\xc8\x43\x9a\x2b\xb2\x53\x0e\x14\x7a\xaa\x79\x35\x4f\x78\x1c\xf3\xc4\x12\xef\x64\xb0\x12\xbf\x1d\x20\x79\x0a\x24\x13\xaa\x86\x2e\x32\x58\x20\xe6\x63\xe2\xce\xfe\x0e\xc7\x30\xa1\x35\x63\xdd\xec\xb9\xe0\x3b\xf9\xd3\x9c\xb5\x89\x88\x0c\x05\x4d\x15\xe5\x89\xb7\xc0\xc6\x8a\xdc\x28\xbb\x8e\x5f\x18\x95\x2a\x43\x15\x38\x19\x80\x64\x30\xb0\x72\xb5\x1b\x05\xb0\x6a\x27\x6d\x15\xdf\x18\x52\x8b\xaf\x47\x5d\x94\x2b\x90\x09\x66\x27\x7f\x95\x24\x1c\xd6\x09\x64\x72\x58\x96\xc0\xf7\xe0\x5b\x9e\xa0\xa4\x66\x59\x4f\xc9\x70\x78\xdd\x84\x11\x1e\x31\xd5\x54\x54\x31\x92\x69\xaa\x48\x9c\x32\xac\x5c\x7f\x6b\xce\x33\xab\xcb\x67\x24\xb5\x9b\xc7\x75\xac\xdc\x60\x5a\x91\x5f\x1f\x33\xd6\x03\x40\x85\x5f\xad\xf8\x9a\x29\x38\xc7\x32\x44\x46\x93\xeb\x95\x25\x48\x05\xd1\x0e\xe1\xad\x86\x5d\xe2\xbf\xd0\x00\x26\x35\xac\x28\x41\x75\x7a\x67\x21\x87\x34\x0d\x87\x58\x15\x26\x13\x3c\xbe\xbf\xf9\x67\xb9\x41\xec\x49\x20\x59\xdd\x35\x1c\xd9\x52\x3d\x5b\x34\x52\xb7\x39\xbf\x6a\x0c\xde\xcd\xdd\xaa\x1c\x43\x46\x49\xa2\xee\xaf\xf1\x3c\x8e\x45\xf6\xbe\xdf\x22\x56\xf9\xd2\x44\x2a\x9c\x84\x44\xd6\xf0\xad\x24\x9d\x05\x56\xe5\xa9\x1c\x90\x84\x92\x5f\x66\xd4\x0a\x43\xc9\x47\x22\x5c\x16\xc4\x35\xea\x3b\x62\x92\x18\x53\x56\xb0\x2c\x2a\xd7\x9d\xe5\x73\x39\x0d\x55\xcc\x34\x9b\x46\xe7\xd1\xeb\x7f\x9e\x5c\xfe\xe7\xfd\x29\xd2\x20\xf4\xfe\xea\x6f\xe7\xff\x38\x41\x9e\x1f\x04\xff\xda\x3f\x09\x82\xd7\x97\xaf\xd1\xbf\xdf\x5c\xbe\x3d\x47\xbb\xcd\x16\xba\x84\xc4\x2a\xa9\x36\x11\x66\x41\x70\xfa\x0e\x8a\xc7\x50\xa9\xb4\x1d\x04\x93\xc9\xa4\x39\xd9\x6f\x72\x31\x08\x2e\x2f\x82\x1b\xcd\x6b\x57\x13\x67\x8f\xbe\x2a\x51\x36\x23\x15\x79\xc7\x8d\x8e\x99\xf0\x26\x66\x89\xec\xd6\xb0\xd9\x3d\x3c\x3c\xb4\xd4\xde\x6a\x48\x52\xdd\x32\xd2\xf5\xfa\x3c\x51\x7e\x1f\xc7\x94\xdd\xb6\xd1\x93\x37\x84\x8d\x89\xa2\x21\x46\xef\xc8\x88\x3c\x79\x86\x72\xc0\x33\xf4\x4a\x50\xcc\x9e\x21\x09\x92\xf9\x90\x72\x69\xff\x08\xf5\xf8\x8d\x2f\xe9\x77\xa8\xe9\x6d\x78\x16\x11\x11\x3e\x80\x8e\x90\x61\x0a\x2f\x48\x1b\xed\x3e\x4f\x01\x10\x63\x31\xa0\x49\x1b\xb5\x8e\x8c\x26\x04\x47\xf0\x27\x26\x0a\x23\x9d\xb9\xbb\xde\x98\x92\x49\x0a\x25\xc7\x43\x21\x90\x42\x24\x74\xbd\x09\x8d\xd4\xb0\x1b\x91\x31\x0d\x89\x6f\x06\x1e\x0a\xa6\x54\x5a\x35\x9f\x7c\x1b\xd1\x71\xd7\x3b\xb1\x14\xfe\xe5\x6d\x4a\x4a\xf4\xda\xbb\x03\xad\xea\x11\x82\xec\x22\x24\x51\xdd\xab\xcb\x33\xff\xa5\xe5\x62\x92\xe6\xf1\x22\xaf\xe8\x04\x16\xa7\xd1\xe8\x04\x56\xe0\x46\xa7\xc7\xa3\x5b\x44\x81\x44\x86\x3c\x05\xb1\x3d\x33\x50\xb7\xfa\x39\xb3\xb6\x0c\x87\xe0\x3a\xc6\xda\xa7\xda\x85\xde\x4e\x93\xd9\x5a\xed\xed\x4f\x48\xef\x9a\xc2\x44\xe6\x45\xcc\xb9\x1a\x1a\x22\x9c\x28\x60\x4a\xb1\x24\x51\x81\xa4\x2d\x65\xa8\x7d\x1c\x7d\x1d\x49\xd5\x46\x09\x4f\xc8\x11\x32\x46\x07\x8e\xad\xd6\x5f\xd0\x23\x1a\xeb\xf5\x01\xfa\x23\x34\x24\x74\x30\x54\xf6\xc5\x11\x82\xca\x43\xfc\x1c\xd4\x3c\x20\x31\xc8\x09\xb5\x64\x00\xfb\xa9\x24\xf2\x43\xce\xb8\x68\xa3\xc7\xfd\x03\xfd\x5b\xf6\x04\x94\xe2\x28\x32\x52\x81\x57\xa0\xde\xc0\x60\x76\xbd\x0c\xd3\xd3\xf6\x56\xb8\xc7\xc8\x7a\x2d\x57\x52\x7a\x45\x3d\x6a\x65\x47\xa8\xa3\xc4\x03\xc6\x18\x42\x5a\x82\x68\xbd\x12\xc0\x39\x42\x33\x61\x3e\xb8\xd8\x00\x24\x51\x3c\x75\x0d\x35\x36\x2f\x20\x36\x79\xea\x1d\x43\x80\x45\x85\xa0\x36\xdc\xbd\x83\x56\x6b\xcd\xa1\x52\x2b\x74\x44\x25\x64\x05\x98\xb6\xc7\x78\x78\xed\x78\x7f\x8c\x6f\xfc\xcc\x49\x40\xd8\xf4\xc6\x79\x19\x32\x82\x85\x9e\x10\x8e\x19\x65\xf8\xbc\x50\xca\x8d\x83\xf0\x48\xf1\x99\x90\x70\xac\x65\x0c\x05\xa6\x8a\xe8\x78\xdd\x6e\xe5\xea\x3b\x6b\x9c\xc5\x4a\x4c\xe5\xd6\x8b\x6c\x82\x39\x5b\x67\x6d\x09\x48\xd6\x84\xb1\x0c\xbb\xeb\xb5\xec\x58\xa6\x38\x9c\x8e\xd7\xaa\x68\xf6\x52\xe0\x88\x8e\x64\x1b\xed\x1b\x58\x4d\x02\xe8\xf7\x9d\x2c\x66\xc9\x80\x09\xb8\x82\xe4\x8c\x46\xe8\x31\x39\xd4\xbf\x6e\x62\xe8\xf7\x4b\xb6\xd8\x84\xec\x50\x48\xb2\xbe\x2c\x71\x30\x37\xe0\x1c\xeb\x1a\x92\x49\x56\x52\x5e\xb4\xc0\xc8\xa6\x44\x65\xf8\x21\x94\x77\x22\xea\xd6\xcb\xfc\x6b\x99\x45\xa9\xae\xdb\xe9\xc1\x8b\xbd\xbd\x93\xfa\x02\xb4\xa7\xfd\xda\x43\x59\xbc\xd9\x09\xca\xab\x67\x69\xeb\x23\x72\xfa\x53\x5c\x73\xe4\xf7\x1b\xc8\x6c\x5d\x67\x6e\x2a\x2c\xce\x0e\xda\x05\x04\x99\x6f\x3d\x41\x67\x81\x8a\xa3\xf8\x9c\xab\x10\xbd\x03\x45\xa8\x3a\x6f\x76\x30\xef\x3a\xc7\xf2\x0a\x5a\xb6\xc9\x75\x16\x3f\xcf\xc1\xf9\x58\x6c\xdd\x74\x95\x62\x56\x38\xcf\xae\x75\x9e\x45\xbe\xb1\xf1\xb9\x6f\xae\xd9\x37\xcb\x09\x36\xdd\x15\x20\xf7\x4c\x73\xc9\x22\x77\xc8\xd4\x80\x63\x8c\x20\xfd\xae\xb7\xca\x79\x77\xcd\xfe\x30\x4d\x9a\x67\x67\x67\x59\xf2\x8d\x48\xc8\x85\xb9\x1c\x9c\x1e\x0f\x9c\x8d\xff\x9e\xde\xf6\x3b\x79\xbb\xc7\x59\x54\x9f\xb8\xc3\x91\x90\x9a\x7b\xca\xa9\x05\xe4\x1b\x0a\x9a\x18\xa6\xd9\xbe\x62\x26\xc1\xbf\xd0\x82\x19\x7e\xe6\x74\x0c\x09\x33\x06\x9e\x38\xa5\x0a\xf8\x7f\x27\xb5\x49\x7f\xff\xf9\x4b\x12\xe1\x9a\x7a\x5d\xc1\xc8\xc0\xc6\xca\x6d\x5b\xc8\x73\x60\xbe\x7b\x83\xf2\x62\x97\xf7\xf8\x23\x1c\x58\x41\x5c\xb4\xf4\xfe\xa7\x13\xe0\x5a\x1f\x9e\x49\xbc\xf5\xe9\xd7\xfe\xd4\x16\x90\xec\x2e\x7d\x07\x3c\xae\xa6\x28\x6c\x43\xf6\xff\x13\xb2\x52\x09\x9e\x0c\x1e\xce\xb4\x9f\xe6\x37\x53\x3e\x23\x0b\xe8\x04\x56\xc8\x5f\xe0\x75\x35\x1b\x86\xec\xcd\xb4\x63\xe0\x48\xb2\xf5\xc3\xdf\xc6\x0f\xed\xd6\x34\x77\xb5\x4e\xef\xe1\x96\x59\x5f\xe7\xd5\xd9\x68\x49\xab\x6c\x7e\x3f\xeb\x81\x95\x99\x1f\x77\x99\x56\x4e\x2d\x28\x5a\x76\xb6\x12\x3c\xb8\x67\x94\x24\xda\x14\xf7\x58\x6a\xd1\xa5\xfd\xcf\x3f\xa4\xb3\xdc\x2f\xd9\xaf\xb8\xfb\xb8\x20\xb0\x45\x1a\x93\x68\xce\xfe\x63\xbb\x69\xd9\xa0\x62\xb1\x81\xc9\xb9\x33\xdc\x40\x99\x36\xce\x4e\x77\x89\xe0\x45\x1b\xb6\x6d\x60\xfd\x39\x77\x61\xe5\xd3\xc0\x34\x21\x97\xce\x03\x53\xd0\x03\x9c\x08\x72\x69\xb6\xde\xf8\xdb\x78\xe3\xf6\x4c\xb0\x3d\x13\x6c\xcf\x04\x9b\xed\x2c\xbf\x22\xdd\x03\xb6\xee\x66\x1c\xdf\xa1\x91\x94\x93\x14\x90\xb5\xf7\xb1\x9d\x0f\x3b\x4a\x7d\xfa\xe2\xb2\xfb\xf0\xf0\x70\x51\x7b\xd0\xed\x8b\x55\x1b\x3a\x9b\x51\xd3\x36\xa9\xba\xae\xb3\xb2\xee\x2d\x6d\x2d\x9b\xe5\xad\xeb\x47\x2c\x29\xbd\x33\x5d\x61\xf7\x1b\x96\x52\x0f\x67\xe6\x83\xfb\xf5\x39\xc4\x5e\xb9\x63\x53\x68\x59\xee\xd8\x8c\x12\xa0\xd4\xbd\x15\x77\xbd\x3e\x80\x4e\xa8\x77\xbb\x5a\x17\xa3\x9a\x3b\x2a\xdd\xe2\xd9\xcc\xd0\x09\x20\xcc\x8f\xed\xff\x0d\x37\x4d\x6c\xda\xae\x6b\xce\xc7\x49\x56\xc5\x22\x7f\x75\x02\xfd\x0d\xa0\x86\xe8\x4f\x0b\x8f\x1b\xc5\x37\xef\x8d\xff\x05\x00\x00\xff\xff\xcc\xc4\x43\x99\xc7\x31\x00\x00")

func templateDefaultTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateDefaultTmpl,
		"template/default.tmpl",
	)
}

func templateDefaultTmpl() (*asset, error) {
	bytes, err := templateDefaultTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/default.tmpl", size: 12743, mode: os.FileMode(420), modTime: time.Unix(1454668352, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/default.tmpl": templateDefaultTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"default.tmpl": &bintree{templateDefaultTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
