// Code generated by go-bindata.
// sources:
// template/default.tmpl
// DO NOT EDIT!

package deftmpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateDefaultTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x57\x7b\x8f\xd4\x36\x10\xff\xbb\xfb\x29\xdc\x40\x05\x87\x76\x93\x5d\x5a\xd4\xb2\x8f\xab\x50\xd5\x96\x4a\x80\x2a\x1e\xfd\xa7\xaa\x90\x37\x71\x36\x06\xc7\x4e\x63\xe7\x1e\xbd\xde\x77\xef\x8c\x9d\x64\x9d\x4d\xf6\xf6\x38\xa0\x45\x2a\x77\x12\xc4\xe3\x99\xf1\x6f\x5e\xf6\xef\x2e\x2e\x48\xc2\x52\x2e\x19\x09\x5e\xbf\xa6\x82\x95\x26\xa7\x92\x6e\x58\x19\x90\xcb\xcb\x47\xb8\x7e\xea\xd6\xa0\xc8\x64\x02\xc2\xd1\x5e\x93\x57\xcf\x9f\xa0\x15\xec\x87\x3f\x9e\x19\x56\x4a\x2a\x40\x04\x92\xe8\x56\x64\xf5\xf4\xf7\x25\x8b\x19\x3f\x61\xe5\x0a\x95\x9e\xd7\x0b\x67\x53\x7b\xef\xba\xd7\xd5\xfa\x0d\x8b\x0d\xba\xfd\x1d\x4d\x5e\x18\x6a\x2a\x4d\xfe\x26\x46\xbd\x2a\x8a\xc6\x94\xa7\x84\xfd\xd9\x6e\x06\x29\x2f\xb9\xdc\xa0\xcd\x1c\x6d\x6c\x14\x3a\xfc\xc9\x4a\xc1\x54\x30\xe9\x9f\xf8\x07\x41\xa5\x9f\x4b\x55\x15\x4f\xe8\x9a\x09\x1d\xbe\x50\xa5\x61\xc9\xaf\x94\x97\x3a\xfc\x8d\x8a\x8a\xe1\x81\x6f\x14\x97\x24\x20\xe8\x95\xb8\x23\x37\x86\xdc\x45\x5f\xe1\x0f\x2a\xcf\x95\x74\xc6\x47\xb5\xcc\xf3\x77\x04\x26\x77\xc1\xe4\x94\x9b\xac\xab\x0c\x19\xc8\xd5\x09\xeb\x9e\xfe\x8c\xe6\x70\xa0\x4b\xe3\xd0\xe9\x2d\xf0\xa3\xf6\x6b\x4f\x6d\x12\xa6\xe3\x92\x17\x86\x2b\x19\x5c\x91\x63\xc3\xce\x8c\xab\xe3\x6b\xc1\xb5\xa9\x55\x4b\x2a\x37\x80\x0c\x16\x0e\xd7\x9c\x8c\xb6\xd2\x7e\xa2\x30\x2d\x13\x9b\x49\xc4\x8f\xab\x15\x69\x23\xa8\x91\xb9\xd3\x1f\x49\xa9\xa0\x50\x00\xaa\xeb\xd3\x93\xdf\xc0\xb1\x7f\x82\x17\xa8\x1f\xa9\x16\x34\x7e\x1b\xc2\x8a\x56\xc2\x84\x86\x1b\xc1\xea\x58\x0d\xcb\x0b\x41\x4d\xb7\xe3\xc2\x7d\x89\xed\xfa\xa9\x34\x36\x7a\x3e\xe4\xaa\x3b\x4e\xd7\xf4\x97\x52\x21\xd6\x20\xe8\xf9\x1b\x84\x8f\x4e\xa1\x3d\x0e\x29\x0a\x2e\xdf\x5e\x1b\x41\x51\x32\x6c\x89\xe0\x7a\xda\x9e\xff\x2b\x13\x60\x2f\x87\x6b\x22\xe8\x1f\xdf\x29\x64\x81\xfe\x92\xca\x9c\xb7\x06\xfd\x4e\x7f\xb7\x92\xf6\x3d\xc6\x82\x33\x69\x6e\x5e\xd4\x7d\x1e\xb7\x77\xe4\xcd\x12\xd5\xf7\xcb\xa5\x36\x54\xc6\x4c\x0f\xf8\xed\x8d\x76\xb8\x3f\xab\xaa\xd0\x1b\x26\x39\xfb\x60\x49\xed\x39\xd4\xaa\x2a\xe3\x43\x83\x32\x10\x7e\x07\x26\xcb\x29\x17\x5b\x97\xdb\xf7\xe1\x9d\xf1\x75\x3d\x65\x26\x17\x81\xd3\x88\xee\x8d\x46\x2f\x33\x46\x52\x25\x84\x3a\xc5\x47\x83\x6b\x62\x40\x50\x32\x9a\xd0\xb5\x60\xe4\xf1\xcb\xa7\x4f\x48\xac\x12\xd4\x29\xed\x16\xfa\x6a\xcf\x0f\xc9\x2f\x86\x64\x14\x8c\x14\x59\x33\xc2\x25\xcc\x07\x4b\xc6\x84\x85\x9b\x90\xac\xcf\x47\x99\x31\xc5\x3c\x8a\x1a\x75\x1d\xa2\x75\x9c\xf1\xbc\x08\x63\x95\x47\x25\x73\x99\xd2\x91\xb3\x9c\xc4\x5a\x47\xa1\xc3\x54\xfb\x22\xaa\x32\x45\x65\x10\x18\xd4\x9f\xe1\x6d\x49\x68\x0a\x6f\x2e\x80\x01\x19\x78\xc9\xa1\xd9\xc0\x66\x02\x3f\xa3\xa5\x36\xe7\x82\x1d\x8f\x8c\x05\x7f\x31\x22\x64\xad\xca\x84\x95\x13\x5d\xd0\x18\xe2\x9b\x93\xe9\x62\x2b\x8c\x21\x6c\x5a\x68\x36\x27\xcd\xd7\x62\x74\xe9\x6c\x43\x38\x16\xce\x40\x0f\x39\x2d\x37\x5c\x82\x25\xa1\x95\x51\x68\x7e\xca\x13\x93\xcd\xc9\x6c\x3a\xfd\x6a\x61\x15\xce\x26\xb5\xe8\xdb\xe9\xb4\x38\xb3\x27\xc0\x94\x6f\xe0\xad\x93\xc9\x9c\xdc\x4a\xd3\x14\x65\xa9\x92\x66\x92\xd2\x9c\x8b\xf3\x39\xb9\xf3\x98\x89\x13\x66\x78\x4c\xc9\x33\x56\xb1\x3b\x63\xd2\x0a\xc6\xe4\x51\xc9\xa9\x18\x13\x4d\xa5\x9e\x40\xcc\xdc\x9a\x03\x46\x55\x82\xb7\xfb\x53\xfc\x25\x5f\x42\x12\xe1\xf1\xa0\xd2\x58\xd0\x89\xc5\x5a\xd0\x24\xd9\x86\x89\x43\x31\xa1\x82\x6f\x00\xbd\x60\xa9\x41\x19\xb0\x10\x3c\x43\x34\x72\xa3\x0a\xb4\x87\xe1\x92\x75\xbc\xad\x8f\x99\x8d\xe5\x72\x94\xcd\xac\xdc\xc2\xd7\xfc\x2f\x48\xd7\x2c\x9c\x3d\x60\x79\x1b\xd3\x29\xe3\x9b\xcc\xcc\x21\xad\x22\x59\xb4\x19\x9b\xac\x95\x31\x2a\x07\xed\xef\x9c\x1f\xc1\x49\x28\xf0\x3d\xc5\x57\x64\x4c\xda\xe5\x89\x7d\xe0\x2e\xb6\x21\x72\x99\x41\xd0\x16\xee\x69\xc6\x0d\xb3\xd5\x83\x63\xe1\xbe\x9e\x9c\x96\xb4\xc0\x8d\x84\x6b\x68\xa9\xf3\x79\xdd\x27\x93\xb5\x50\xf1\xdb\xde\x29\x7e\x40\x93\xd2\xa1\x9c\x3d\x70\x25\x1a\x84\xde\xa9\x11\xd0\x17\x65\x8f\xee\xf8\xdd\xc2\xf5\x32\x32\x0d\x1f\x62\x42\x2e\x47\x95\xb0\x5b\x78\x09\x4d\x6c\x33\xce\x89\x54\x92\x2d\xfc\x46\x5a\xec\x54\x0a\xd2\x0f\x91\x57\xb9\xb4\xa6\x3b\xdd\x95\xd5\x08\x9b\xf5\x9e\xc0\xf7\x57\xd6\xde\x39\xde\x2c\x80\xab\xe2\x8c\x24\x50\x1c\x18\xa5\x5b\x0f\x1f\xe0\xaf\x55\x14\x8e\xeb\x78\x50\xbc\xce\xbe\xff\xb0\x4e\x5b\xd3\x86\xd0\xd4\x9d\x1e\xdc\xe9\xf9\x6f\x52\xfc\x75\x00\x3c\xbe\x33\xec\xfc\x6b\xe7\xfc\x72\xb4\x8c\xea\x01\x5e\xba\x09\x8e\x05\xd5\x7a\x15\xd8\x61\x0c\x88\x0d\x6c\x15\xc4\x30\xf0\xb0\x44\xa5\x12\xff\x49\x8e\xc1\x5b\x6d\x60\x1d\xae\x02\x4c\x56\x80\x62\xdc\x28\xdd\x07\x7e\x26\x8d\x47\xdb\xee\x41\xb3\x01\x5b\xd9\xec\x18\x6e\x4c\xcb\x68\x1d\x8d\x46\xbe\x61\x53\xb7\xc3\x81\xdd\xee\x11\x99\x81\x82\x6e\xaf\x5b\x7b\x3d\xee\xd0\x6b\x10\x2f\x23\xf0\xdb\x9c\x1e\x39\xa4\xf6\xcb\x62\x82\xff\x11\x34\xc4\x60\xb7\x40\xe2\x91\xc4\x06\x44\x1b\x65\x03\xdd\x82\x0a\xac\xfa\x32\xe1\x27\x8d\xd8\x55\x8f\xb8\x04\xb7\xb1\xef\x49\x4a\x27\x2d\x57\x26\x06\x77\x2b\xe1\xd6\x2d\xba\xdb\xf6\xb0\x31\xb9\xed\x66\x61\xbe\x6a\x88\x32\xe2\x25\xfe\xcf\x52\xf0\xe3\xae\xe4\x8b\x25\x8c\x94\xec\xa0\xb6\xac\x12\xd3\xef\xfc\xda\xbc\xa1\xd2\x61\x4b\x7b\xbe\x33\x3d\xa9\x69\xf2\xa0\xe9\x32\x6a\x70\x6c\x1f\xc8\xce\x76\x13\x62\xb7\x50\xdb\x52\x79\xc5\xc2\x4f\xc8\x7b\xaf\x00\x5e\x9b\xff\x67\x55\xf0\xfe\xb4\xf8\x7f\x95\xc2\x29\x36\x2a\x1e\xa3\x6a\x75\x91\x20\x00\xb3\x68\x88\x13\xec\x8f\x2d\x9f\xe9\x71\x9f\x86\x78\xc0\x7d\xaa\x21\x91\x44\xa5\x56\x4c\xd7\xf0\x07\x2c\xf0\x8c\x7b\x91\x9d\xc9\x83\xd7\x13\xb1\x37\xd9\x2a\xe8\x13\x90\xfd\xec\x63\x87\x6a\xf8\x2f\x41\x8f\x64\xf4\x18\xc6\xfb\xd0\x8b\x2e\xb7\x58\x78\x77\x6b\x13\x86\xf7\x5e\xf5\x68\xc5\xd0\xcb\x13\xec\xb9\x94\x6f\x92\x96\x6b\xdc\xe4\x3d\x98\x96\xbc\x5c\x1f\x69\xed\x16\xa8\x4e\xed\xa8\xcf\x76\xfa\x7c\x61\x88\xe7\x04\x9f\xec\x33\x82\xda\xc3\x6f\xc9\x4d\x6b\x7c\x05\x9f\x38\xf4\x3e\x35\x47\xfa\x2d\xde\x61\x3a\xc3\x34\x67\x08\x45\x8f\xa4\x78\x0c\x65\x31\xc4\x49\xf6\x5f\xcb\xef\xd1\x9c\x87\xee\xf2\x0f\xd3\xa0\xee\x1d\x68\x7c\xf5\x48\xe6\x96\x61\x7a\xa5\x0c\xfe\x85\xc7\xbb\x41\xb4\x43\xe0\x87\xd9\xfb\x70\x69\x87\x58\x7a\x7f\xe4\xf6\xf0\xf3\xf7\x79\xb2\x3e\x00\xf6\xde\x1f\x02\x9f\x2e\x25\xf9\x38\x83\xe7\x08\xfc\xe7\xc1\xfa\x38\x7c\xec\xf3\x74\x7d\x22\xd3\x75\x98\x65\x6e\x65\xff\x04\x00\x00\xff\xff\x8f\xfd\x79\xf2\x70\x1a\x00\x00")

func templateDefaultTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateDefaultTmpl,
		"template/default.tmpl",
	)
}

func templateDefaultTmpl() (*asset, error) {
	bytes, err := templateDefaultTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/default.tmpl", size: 6768, mode: os.FileMode(420), modTime: time.Unix(1448979869, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/default.tmpl": templateDefaultTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"default.tmpl": &bintree{templateDefaultTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
